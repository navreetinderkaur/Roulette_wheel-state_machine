
prog8125-statemachine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001054  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080011dc  080011dc  000111dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800121c  0800121c  0001121c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001220  08001220  00011220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001224  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  7 .bss          00000028  2000000c  2000000c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000034  20000034  0002000c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_line   00001a64  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00004419  00000000  00000000  00021aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00000d9a  00000000  00000000  00025eb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000300  00000000  00000000  00026c58  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000290  00000000  00000000  00026f58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000013b0  00000000  00000000  000271e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00001362  00000000  00000000  00028598  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  000298fa  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000005f8  00000000  00000000  00029978  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080011c4 	.word	0x080011c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080011c4 	.word	0x080011c4

080001c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80001c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000200 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80001cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80001ce:	e003      	b.n	80001d8 <LoopCopyDataInit>

080001d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80001d0:	4b0c      	ldr	r3, [pc, #48]	; (8000204 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80001d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80001d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80001d6:	3104      	adds	r1, #4

080001d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80001d8:	480b      	ldr	r0, [pc, #44]	; (8000208 <LoopForever+0xa>)
	ldr	r3, =_edata
 80001da:	4b0c      	ldr	r3, [pc, #48]	; (800020c <LoopForever+0xe>)
	adds	r2, r0, r1
 80001dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80001de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80001e0:	d3f6      	bcc.n	80001d0 <CopyDataInit>
	ldr	r2, =_sbss
 80001e2:	4a0b      	ldr	r2, [pc, #44]	; (8000210 <LoopForever+0x12>)
	b	LoopFillZerobss
 80001e4:	e002      	b.n	80001ec <LoopFillZerobss>

080001e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80001e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80001e8:	f842 3b04 	str.w	r3, [r2], #4

080001ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80001ec:	4b09      	ldr	r3, [pc, #36]	; (8000214 <LoopForever+0x16>)
	cmp	r2, r3
 80001ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80001f0:	d3f9      	bcc.n	80001e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80001f2:	f000 f813 	bl	800021c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80001f6:	f000 ffbf 	bl	8001178 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80001fa:	f000 ff17 	bl	800102c <main>

080001fe <LoopForever>:

LoopForever:
    b LoopForever
 80001fe:	e7fe      	b.n	80001fe <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000200:	2000a000 	.word	0x2000a000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8000204:	08001224 	.word	0x08001224
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000208:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800020c:	2000000c 	.word	0x2000000c
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8000210:	2000000c 	.word	0x2000000c
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8000214:	20000034 	.word	0x20000034

08000218 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000218:	e7fe      	b.n	8000218 <ADC1_2_IRQHandler>
	...

0800021c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800021c:	4915      	ldr	r1, [pc, #84]	; (8000274 <SystemInit+0x58>)
 800021e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000222:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800022a:	4b13      	ldr	r3, [pc, #76]	; (8000278 <SystemInit+0x5c>)
 800022c:	681a      	ldr	r2, [r3, #0]
 800022e:	f042 0201 	orr.w	r2, r2, #1
 8000232:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8000234:	6858      	ldr	r0, [r3, #4]
 8000236:	4a11      	ldr	r2, [pc, #68]	; (800027c <SystemInit+0x60>)
 8000238:	4002      	ands	r2, r0
 800023a:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800023c:	681a      	ldr	r2, [r3, #0]
 800023e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000242:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000246:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000248:	681a      	ldr	r2, [r3, #0]
 800024a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800024e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000250:	685a      	ldr	r2, [r3, #4]
 8000252:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000256:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8000258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800025a:	f022 020f 	bic.w	r2, r2, #15
 800025e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8000260:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000262:	4a07      	ldr	r2, [pc, #28]	; (8000280 <SystemInit+0x64>)
 8000264:	4002      	ands	r2, r0
 8000266:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8000268:	2200      	movs	r2, #0
 800026a:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800026c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000270:	608b      	str	r3, [r1, #8]
 8000272:	4770      	bx	lr
 8000274:	e000ed00 	.word	0xe000ed00
 8000278:	40021000 	.word	0x40021000
 800027c:	f87fc00c 	.word	0xf87fc00c
 8000280:	ff00fccc 	.word	0xff00fccc

08000284 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000284:	b510      	push	{r4, lr}
 8000286:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000);
 8000288:	4b07      	ldr	r3, [pc, #28]	; (80002a8 <HAL_InitTick+0x24>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4807      	ldr	r0, [pc, #28]	; (80002ac <HAL_InitTick+0x28>)
 800028e:	fba0 3003 	umull	r3, r0, r0, r3
 8000292:	0980      	lsrs	r0, r0, #6
 8000294:	f000 f87e 	bl	8000394 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000298:	2200      	movs	r2, #0
 800029a:	4621      	mov	r1, r4
 800029c:	f04f 30ff 	mov.w	r0, #4294967295
 80002a0:	f000 f846 	bl	8000330 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80002a4:	2000      	movs	r0, #0
 80002a6:	bd10      	pop	{r4, pc}
 80002a8:	20000000 	.word	0x20000000
 80002ac:	10624dd3 	.word	0x10624dd3

080002b0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80002b0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002b2:	4a07      	ldr	r2, [pc, #28]	; (80002d0 <HAL_Init+0x20>)
 80002b4:	6813      	ldr	r3, [r2, #0]
 80002b6:	f043 0310 	orr.w	r3, r3, #16
 80002ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002bc:	2003      	movs	r0, #3
 80002be:	f000 f825 	bl	800030c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80002c2:	2000      	movs	r0, #0
 80002c4:	f7ff ffde 	bl	8000284 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80002c8:	f000 ff12 	bl	80010f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80002cc:	2000      	movs	r0, #0
 80002ce:	bd08      	pop	{r3, pc}
 80002d0:	40022000 	.word	0x40022000

080002d4 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80002d4:	4a02      	ldr	r2, [pc, #8]	; (80002e0 <HAL_IncTick+0xc>)
 80002d6:	6813      	ldr	r3, [r2, #0]
 80002d8:	3301      	adds	r3, #1
 80002da:	6013      	str	r3, [r2, #0]
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	20000030 	.word	0x20000030

080002e4 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80002e4:	4b01      	ldr	r3, [pc, #4]	; (80002ec <HAL_GetTick+0x8>)
 80002e6:	6818      	ldr	r0, [r3, #0]
}
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	20000030 	.word	0x20000030

080002f0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80002f0:	b510      	push	{r4, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80002f6:	f7ff fff5 	bl	80002e4 <HAL_GetTick>
 80002fa:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80002fc:	f7ff fff2 	bl	80002e4 <HAL_GetTick>
 8000300:	1b00      	subs	r0, r0, r4
 8000302:	9b01      	ldr	r3, [sp, #4]
 8000304:	4298      	cmp	r0, r3
 8000306:	d3f9      	bcc.n	80002fc <HAL_Delay+0xc>
  {
  }
}
 8000308:	b002      	add	sp, #8
 800030a:	bd10      	pop	{r4, pc}

0800030c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800030c:	4a07      	ldr	r2, [pc, #28]	; (800032c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800030e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000310:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000314:	041b      	lsls	r3, r3, #16
 8000316:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000318:	0200      	lsls	r0, r0, #8
 800031a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800031e:	4318      	orrs	r0, r3
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000320:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000324:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000328:	60d0      	str	r0, [r2, #12]
 800032a:	4770      	bx	lr
 800032c:	e000ed00 	.word	0xe000ed00

08000330 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000330:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000332:	4b16      	ldr	r3, [pc, #88]	; (800038c <HAL_NVIC_SetPriority+0x5c>)
 8000334:	68db      	ldr	r3, [r3, #12]
 8000336:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800033a:	f1c3 0407 	rsb	r4, r3, #7
 800033e:	2c04      	cmp	r4, #4
 8000340:	bf28      	it	cs
 8000342:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000344:	1d1d      	adds	r5, r3, #4
 8000346:	2d06      	cmp	r5, #6
 8000348:	d901      	bls.n	800034e <HAL_NVIC_SetPriority+0x1e>
 800034a:	1edd      	subs	r5, r3, #3
 800034c:	e000      	b.n	8000350 <HAL_NVIC_SetPriority+0x20>
 800034e:	2500      	movs	r5, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000350:	2301      	movs	r3, #1
 8000352:	fa03 f404 	lsl.w	r4, r3, r4
 8000356:	3c01      	subs	r4, #1
 8000358:	4021      	ands	r1, r4
 800035a:	40a9      	lsls	r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800035c:	40ab      	lsls	r3, r5
 800035e:	3b01      	subs	r3, #1
 8000360:	401a      	ands	r2, r3
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000362:	430a      	orrs	r2, r1
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000364:	2800      	cmp	r0, #0
 8000366:	da06      	bge.n	8000376 <HAL_NVIC_SetPriority+0x46>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000368:	f000 000f 	and.w	r0, r0, #15
 800036c:	0112      	lsls	r2, r2, #4
 800036e:	b2d2      	uxtb	r2, r2
 8000370:	4b07      	ldr	r3, [pc, #28]	; (8000390 <HAL_NVIC_SetPriority+0x60>)
 8000372:	541a      	strb	r2, [r3, r0]
 8000374:	e007      	b.n	8000386 <HAL_NVIC_SetPriority+0x56>
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000376:	0112      	lsls	r2, r2, #4
 8000378:	b2d2      	uxtb	r2, r2
 800037a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800037e:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000382:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000386:	bc30      	pop	{r4, r5}
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	e000ed00 	.word	0xe000ed00
 8000390:	e000ed14 	.word	0xe000ed14

08000394 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000394:	3801      	subs	r0, #1
 8000396:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800039a:	d20a      	bcs.n	80003b2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800039c:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <HAL_SYSTICK_Config+0x24>)
 800039e:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003a0:	21f0      	movs	r1, #240	; 0xf0
 80003a2:	4a06      	ldr	r2, [pc, #24]	; (80003bc <HAL_SYSTICK_Config+0x28>)
 80003a4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003a8:	2000      	movs	r0, #0
 80003aa:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003ac:	2207      	movs	r2, #7
 80003ae:	601a      	str	r2, [r3, #0]
 80003b0:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 80003b2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	e000e010 	.word	0xe000e010
 80003bc:	e000ed00 	.word	0xe000ed00

080003c0 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80003c0:	2804      	cmp	r0, #4
 80003c2:	d105      	bne.n	80003d0 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80003c4:	4a05      	ldr	r2, [pc, #20]	; (80003dc <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80003c6:	6813      	ldr	r3, [r2, #0]
 80003c8:	f043 0304 	orr.w	r3, r3, #4
 80003cc:	6013      	str	r3, [r2, #0]
 80003ce:	4770      	bx	lr
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80003d0:	4a02      	ldr	r2, [pc, #8]	; (80003dc <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80003d2:	6813      	ldr	r3, [r2, #0]
 80003d4:	f023 0304 	bic.w	r3, r3, #4
 80003d8:	6013      	str	r3, [r2, #0]
 80003da:	4770      	bx	lr
 80003dc:	e000e010 	.word	0xe000e010

080003e0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop

080003e4 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80003e4:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80003e6:	f7ff fffb 	bl	80003e0 <HAL_SYSTICK_Callback>
 80003ea:	bd08      	pop	{r3, pc}

080003ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80003ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003ee:	b083      	sub	sp, #12
  uint32_t position = 0x00;
 80003f0:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80003f2:	e0b5      	b.n	8000560 <HAL_GPIO_Init+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80003f4:	2401      	movs	r4, #1
 80003f6:	409c      	lsls	r4, r3

    if(iocurrent)
 80003f8:	4022      	ands	r2, r4
 80003fa:	f000 80b0 	beq.w	800055e <HAL_GPIO_Init+0x172>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80003fe:	684d      	ldr	r5, [r1, #4]
 8000400:	2d02      	cmp	r5, #2
 8000402:	d001      	beq.n	8000408 <HAL_GPIO_Init+0x1c>
 8000404:	2d12      	cmp	r5, #18
 8000406:	d110      	bne.n	800042a <HAL_GPIO_Init+0x3e>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000408:	08de      	lsrs	r6, r3, #3
 800040a:	3608      	adds	r6, #8
 800040c:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000410:	f003 0507 	and.w	r5, r3, #7
 8000414:	00af      	lsls	r7, r5, #2
 8000416:	250f      	movs	r5, #15
 8000418:	40bd      	lsls	r5, r7
 800041a:	ea2c 0e05 	bic.w	lr, ip, r5
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800041e:	690d      	ldr	r5, [r1, #16]
 8000420:	40bd      	lsls	r5, r7
 8000422:	ea4e 0505 	orr.w	r5, lr, r5
        GPIOx->AFR[position >> 3] = temp;
 8000426:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800042a:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800042c:	005f      	lsls	r7, r3, #1
 800042e:	2603      	movs	r6, #3
 8000430:	40be      	lsls	r6, r7
 8000432:	43f6      	mvns	r6, r6
 8000434:	ea05 0e06 	and.w	lr, r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000438:	684d      	ldr	r5, [r1, #4]
 800043a:	f005 0503 	and.w	r5, r5, #3
 800043e:	40bd      	lsls	r5, r7
 8000440:	ea4e 0505 	orr.w	r5, lr, r5
      GPIOx->MODER = temp;
 8000444:	6005      	str	r5, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000446:	684d      	ldr	r5, [r1, #4]
 8000448:	f105 3eff 	add.w	lr, r5, #4294967295
 800044c:	f1be 0f01 	cmp.w	lr, #1
 8000450:	d903      	bls.n	800045a <HAL_GPIO_Init+0x6e>
 8000452:	2d11      	cmp	r5, #17
 8000454:	d001      	beq.n	800045a <HAL_GPIO_Init+0x6e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000456:	2d12      	cmp	r5, #18
 8000458:	d110      	bne.n	800047c <HAL_GPIO_Init+0x90>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800045a:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800045c:	ea06 0e05 	and.w	lr, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8000460:	68cd      	ldr	r5, [r1, #12]
 8000462:	40bd      	lsls	r5, r7
 8000464:	ea4e 0505 	orr.w	r5, lr, r5
        GPIOx->OSPEEDR = temp;
 8000468:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800046a:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800046c:	ea25 0404 	bic.w	r4, r5, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000470:	684d      	ldr	r5, [r1, #4]
 8000472:	f3c5 1500 	ubfx	r5, r5, #4, #1
 8000476:	409d      	lsls	r5, r3
 8000478:	4325      	orrs	r5, r4
        GPIOx->OTYPER = temp;
 800047a:	6045      	str	r5, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800047c:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800047e:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000480:	688c      	ldr	r4, [r1, #8]
 8000482:	40bc      	lsls	r4, r7
 8000484:	4334      	orrs	r4, r6
      GPIOx->PUPDR = temp;
 8000486:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000488:	684c      	ldr	r4, [r1, #4]
 800048a:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 800048e:	d066      	beq.n	800055e <HAL_GPIO_Init+0x172>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000490:	4c37      	ldr	r4, [pc, #220]	; (8000570 <HAL_GPIO_Init+0x184>)
 8000492:	69a5      	ldr	r5, [r4, #24]
 8000494:	f045 0501 	orr.w	r5, r5, #1
 8000498:	61a5      	str	r5, [r4, #24]
 800049a:	69a4      	ldr	r4, [r4, #24]
 800049c:	f004 0401 	and.w	r4, r4, #1
 80004a0:	9401      	str	r4, [sp, #4]
 80004a2:	9c01      	ldr	r4, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2];
 80004a4:	089e      	lsrs	r6, r3, #2
 80004a6:	1cb5      	adds	r5, r6, #2
 80004a8:	4c32      	ldr	r4, [pc, #200]	; (8000574 <HAL_GPIO_Init+0x188>)
 80004aa:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80004ae:	f003 0403 	and.w	r4, r3, #3
 80004b2:	00a4      	lsls	r4, r4, #2
 80004b4:	270f      	movs	r7, #15
 80004b6:	40a7      	lsls	r7, r4
 80004b8:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80004bc:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80004c0:	d010      	beq.n	80004e4 <HAL_GPIO_Init+0xf8>
 80004c2:	4d2d      	ldr	r5, [pc, #180]	; (8000578 <HAL_GPIO_Init+0x18c>)
 80004c4:	42a8      	cmp	r0, r5
 80004c6:	d00f      	beq.n	80004e8 <HAL_GPIO_Init+0xfc>
 80004c8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80004cc:	42a8      	cmp	r0, r5
 80004ce:	d00d      	beq.n	80004ec <HAL_GPIO_Init+0x100>
 80004d0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80004d4:	42a8      	cmp	r0, r5
 80004d6:	d00b      	beq.n	80004f0 <HAL_GPIO_Init+0x104>
 80004d8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80004dc:	42a8      	cmp	r0, r5
 80004de:	d109      	bne.n	80004f4 <HAL_GPIO_Init+0x108>
 80004e0:	2504      	movs	r5, #4
 80004e2:	e008      	b.n	80004f6 <HAL_GPIO_Init+0x10a>
 80004e4:	2500      	movs	r5, #0
 80004e6:	e006      	b.n	80004f6 <HAL_GPIO_Init+0x10a>
 80004e8:	2501      	movs	r5, #1
 80004ea:	e004      	b.n	80004f6 <HAL_GPIO_Init+0x10a>
 80004ec:	2502      	movs	r5, #2
 80004ee:	e002      	b.n	80004f6 <HAL_GPIO_Init+0x10a>
 80004f0:	2503      	movs	r5, #3
 80004f2:	e000      	b.n	80004f6 <HAL_GPIO_Init+0x10a>
 80004f4:	2505      	movs	r5, #5
 80004f6:	fa05 f404 	lsl.w	r4, r5, r4
 80004fa:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 80004fc:	3602      	adds	r6, #2
 80004fe:	4d1d      	ldr	r5, [pc, #116]	; (8000574 <HAL_GPIO_Init+0x188>)
 8000500:	f845 4026 	str.w	r4, [r5, r6, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000504:	4c1d      	ldr	r4, [pc, #116]	; (800057c <HAL_GPIO_Init+0x190>)
 8000506:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000508:	43d4      	mvns	r4, r2
 800050a:	ea05 0604 	and.w	r6, r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800050e:	684f      	ldr	r7, [r1, #4]
 8000510:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000514:	d001      	beq.n	800051a <HAL_GPIO_Init+0x12e>
        {
          temp |= iocurrent;
 8000516:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 800051a:	4d18      	ldr	r5, [pc, #96]	; (800057c <HAL_GPIO_Init+0x190>)
 800051c:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 800051e:	686d      	ldr	r5, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
 8000520:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000524:	684f      	ldr	r7, [r1, #4]
 8000526:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800052a:	d001      	beq.n	8000530 <HAL_GPIO_Init+0x144>
        {
          temp |= iocurrent;
 800052c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 8000530:	4d12      	ldr	r5, [pc, #72]	; (800057c <HAL_GPIO_Init+0x190>)
 8000532:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000534:	68ad      	ldr	r5, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 8000536:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800053a:	684f      	ldr	r7, [r1, #4]
 800053c:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000540:	d001      	beq.n	8000546 <HAL_GPIO_Init+0x15a>
        {
          temp |= iocurrent;
 8000542:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 8000546:	4d0d      	ldr	r5, [pc, #52]	; (800057c <HAL_GPIO_Init+0x190>)
 8000548:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 800054a:	68ed      	ldr	r5, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
 800054c:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800054e:	684e      	ldr	r6, [r1, #4]
 8000550:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000554:	d001      	beq.n	800055a <HAL_GPIO_Init+0x16e>
        {
          temp |= iocurrent;
 8000556:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 800055a:	4a08      	ldr	r2, [pc, #32]	; (800057c <HAL_GPIO_Init+0x190>)
 800055c:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 800055e:	3301      	adds	r3, #1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000560:	680a      	ldr	r2, [r1, #0]
 8000562:	fa32 f403 	lsrs.w	r4, r2, r3
 8000566:	f47f af45 	bne.w	80003f4 <HAL_GPIO_Init+0x8>
      }
    }
    
    position++;
  }
}
 800056a:	b003      	add	sp, #12
 800056c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800056e:	bf00      	nop
 8000570:	40021000 	.word	0x40021000
 8000574:	40010000 	.word	0x40010000
 8000578:	48000400 	.word	0x48000400
 800057c:	40010400 	.word	0x40010400

08000580 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000580:	6903      	ldr	r3, [r0, #16]
 8000582:	4219      	tst	r1, r3
 8000584:	d001      	beq.n	800058a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8000586:	2001      	movs	r0, #1
 8000588:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800058a:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000590:	b10a      	cbz	r2, 8000596 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000592:	6181      	str	r1, [r0, #24]
 8000594:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000596:	6281      	str	r1, [r0, #40]	; 0x28
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800059c:	b570      	push	{r4, r5, r6, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005a2:	6803      	ldr	r3, [r0, #0]
 80005a4:	f013 0f01 	tst.w	r3, #1
 80005a8:	f000 809d 	beq.w	80006e6 <HAL_RCC_OscConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80005ac:	4bb5      	ldr	r3, [pc, #724]	; (8000884 <HAL_RCC_OscConfig+0x2e8>)
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	f003 030c 	and.w	r3, r3, #12
 80005b4:	2b04      	cmp	r3, #4
 80005b6:	d00a      	beq.n	80005ce <HAL_RCC_OscConfig+0x32>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80005b8:	4bb2      	ldr	r3, [pc, #712]	; (8000884 <HAL_RCC_OscConfig+0x2e8>)
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	f003 030c 	and.w	r3, r3, #12
 80005c0:	2b08      	cmp	r3, #8
 80005c2:	d11b      	bne.n	80005fc <HAL_RCC_OscConfig+0x60>
 80005c4:	4baf      	ldr	r3, [pc, #700]	; (8000884 <HAL_RCC_OscConfig+0x2e8>)
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80005cc:	d016      	beq.n	80005fc <HAL_RCC_OscConfig+0x60>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80005d2:	fa93 f3a3 	rbit	r3, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005d6:	4bab      	ldr	r3, [pc, #684]	; (8000884 <HAL_RCC_OscConfig+0x2e8>)
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80005de:	fa93 f3a3 	rbit	r3, r3
 80005e2:	fab3 f383 	clz	r3, r3
 80005e6:	f003 031f 	and.w	r3, r3, #31
 80005ea:	fa22 f303 	lsr.w	r3, r2, r3
 80005ee:	f013 0f01 	tst.w	r3, #1
 80005f2:	d078      	beq.n	80006e6 <HAL_RCC_OscConfig+0x14a>
 80005f4:	6863      	ldr	r3, [r4, #4]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d175      	bne.n	80006e6 <HAL_RCC_OscConfig+0x14a>
 80005fa:	e2b6      	b.n	8000b6a <HAL_RCC_OscConfig+0x5ce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005fc:	6863      	ldr	r3, [r4, #4]
 80005fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000602:	d105      	bne.n	8000610 <HAL_RCC_OscConfig+0x74>
 8000604:	4a9f      	ldr	r2, [pc, #636]	; (8000884 <HAL_RCC_OscConfig+0x2e8>)
 8000606:	6813      	ldr	r3, [r2, #0]
 8000608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800060c:	6013      	str	r3, [r2, #0]
 800060e:	e026      	b.n	800065e <HAL_RCC_OscConfig+0xc2>
 8000610:	b963      	cbnz	r3, 800062c <HAL_RCC_OscConfig+0x90>
 8000612:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000616:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800061a:	681a      	ldr	r2, [r3, #0]
 800061c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	e018      	b.n	800065e <HAL_RCC_OscConfig+0xc2>
 800062c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000630:	d10c      	bne.n	800064c <HAL_RCC_OscConfig+0xb0>
 8000632:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000636:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	681a      	ldr	r2, [r3, #0]
 8000644:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	e008      	b.n	800065e <HAL_RCC_OscConfig+0xc2>
 800064c:	4b8d      	ldr	r3, [pc, #564]	; (8000884 <HAL_RCC_OscConfig+0x2e8>)
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	681a      	ldr	r2, [r3, #0]
 8000658:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800065c:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800065e:	4989      	ldr	r1, [pc, #548]	; (8000884 <HAL_RCC_OscConfig+0x2e8>)
 8000660:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8000662:	f023 020f 	bic.w	r2, r3, #15
 8000666:	68a3      	ldr	r3, [r4, #8]
 8000668:	4313      	orrs	r3, r2
 800066a:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800066c:	6863      	ldr	r3, [r4, #4]
 800066e:	b1eb      	cbz	r3, 80006ac <HAL_RCC_OscConfig+0x110>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000670:	f7ff fe38 	bl	80002e4 <HAL_GetTick>
 8000674:	4605      	mov	r5, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000676:	e005      	b.n	8000684 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000678:	f7ff fe34 	bl	80002e4 <HAL_GetTick>
 800067c:	1b40      	subs	r0, r0, r5
 800067e:	2864      	cmp	r0, #100	; 0x64
 8000680:	f200 8275 	bhi.w	8000b6e <HAL_RCC_OscConfig+0x5d2>
 8000684:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000688:	fa93 f3a3 	rbit	r3, r3
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800068c:	4b7d      	ldr	r3, [pc, #500]	; (8000884 <HAL_RCC_OscConfig+0x2e8>)
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000694:	fa93 f3a3 	rbit	r3, r3
 8000698:	fab3 f383 	clz	r3, r3
 800069c:	f003 031f 	and.w	r3, r3, #31
 80006a0:	fa22 f303 	lsr.w	r3, r2, r3
 80006a4:	f013 0f01 	tst.w	r3, #1
 80006a8:	d0e6      	beq.n	8000678 <HAL_RCC_OscConfig+0xdc>
 80006aa:	e01c      	b.n	80006e6 <HAL_RCC_OscConfig+0x14a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80006ac:	f7ff fe1a 	bl	80002e4 <HAL_GetTick>
 80006b0:	4605      	mov	r5, r0
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80006b2:	e005      	b.n	80006c0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006b4:	f7ff fe16 	bl	80002e4 <HAL_GetTick>
 80006b8:	1b40      	subs	r0, r0, r5
 80006ba:	2864      	cmp	r0, #100	; 0x64
 80006bc:	f200 8259 	bhi.w	8000b72 <HAL_RCC_OscConfig+0x5d6>
 80006c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80006c4:	fa93 f3a3 	rbit	r3, r3
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80006c8:	4b6e      	ldr	r3, [pc, #440]	; (8000884 <HAL_RCC_OscConfig+0x2e8>)
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80006d0:	fa93 f3a3 	rbit	r3, r3
 80006d4:	fab3 f383 	clz	r3, r3
 80006d8:	f003 031f 	and.w	r3, r3, #31
 80006dc:	fa22 f303 	lsr.w	r3, r2, r3
 80006e0:	f013 0f01 	tst.w	r3, #1
 80006e4:	d1e6      	bne.n	80006b4 <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80006e6:	6823      	ldr	r3, [r4, #0]
 80006e8:	f013 0f02 	tst.w	r3, #2
 80006ec:	f000 8090 	beq.w	8000810 <HAL_RCC_OscConfig+0x274>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80006f0:	4b64      	ldr	r3, [pc, #400]	; (8000884 <HAL_RCC_OscConfig+0x2e8>)
 80006f2:	685b      	ldr	r3, [r3, #4]
 80006f4:	f013 0f0c 	tst.w	r3, #12
 80006f8:	d00a      	beq.n	8000710 <HAL_RCC_OscConfig+0x174>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80006fa:	4b62      	ldr	r3, [pc, #392]	; (8000884 <HAL_RCC_OscConfig+0x2e8>)
 80006fc:	685b      	ldr	r3, [r3, #4]
 80006fe:	f003 030c 	and.w	r3, r3, #12
 8000702:	2b08      	cmp	r3, #8
 8000704:	d127      	bne.n	8000756 <HAL_RCC_OscConfig+0x1ba>
 8000706:	4b5f      	ldr	r3, [pc, #380]	; (8000884 <HAL_RCC_OscConfig+0x2e8>)
 8000708:	685b      	ldr	r3, [r3, #4]
 800070a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800070e:	d122      	bne.n	8000756 <HAL_RCC_OscConfig+0x1ba>
 8000710:	2302      	movs	r3, #2
 8000712:	fa93 f3a3 	rbit	r3, r3
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000716:	4b5b      	ldr	r3, [pc, #364]	; (8000884 <HAL_RCC_OscConfig+0x2e8>)
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	2302      	movs	r3, #2
 800071c:	fa93 f3a3 	rbit	r3, r3
 8000720:	fab3 f383 	clz	r3, r3
 8000724:	f003 031f 	and.w	r3, r3, #31
 8000728:	fa22 f303 	lsr.w	r3, r2, r3
 800072c:	f013 0f01 	tst.w	r3, #1
 8000730:	d003      	beq.n	800073a <HAL_RCC_OscConfig+0x19e>
 8000732:	6923      	ldr	r3, [r4, #16]
 8000734:	2b01      	cmp	r3, #1
 8000736:	f040 821e 	bne.w	8000b76 <HAL_RCC_OscConfig+0x5da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800073a:	4852      	ldr	r0, [pc, #328]	; (8000884 <HAL_RCC_OscConfig+0x2e8>)
 800073c:	6803      	ldr	r3, [r0, #0]
 800073e:	f023 01f8 	bic.w	r1, r3, #248	; 0xf8
 8000742:	6963      	ldr	r3, [r4, #20]
 8000744:	22f8      	movs	r2, #248	; 0xf8
 8000746:	fa92 f2a2 	rbit	r2, r2
 800074a:	fab2 f282 	clz	r2, r2
 800074e:	4093      	lsls	r3, r2
 8000750:	430b      	orrs	r3, r1
 8000752:	6003      	str	r3, [r0, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000754:	e05c      	b.n	8000810 <HAL_RCC_OscConfig+0x274>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000756:	6923      	ldr	r3, [r4, #16]
 8000758:	b39b      	cbz	r3, 80007c2 <HAL_RCC_OscConfig+0x226>
 800075a:	2201      	movs	r2, #1
 800075c:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000760:	fab3 f383 	clz	r3, r3
 8000764:	009b      	lsls	r3, r3, #2
 8000766:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800076a:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800076e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000770:	f7ff fdb8 	bl	80002e4 <HAL_GetTick>
 8000774:	4605      	mov	r5, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000776:	e005      	b.n	8000784 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000778:	f7ff fdb4 	bl	80002e4 <HAL_GetTick>
 800077c:	1b40      	subs	r0, r0, r5
 800077e:	2802      	cmp	r0, #2
 8000780:	f200 81fb 	bhi.w	8000b7a <HAL_RCC_OscConfig+0x5de>
 8000784:	2302      	movs	r3, #2
 8000786:	fa93 f3a3 	rbit	r3, r3
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800078a:	4b3e      	ldr	r3, [pc, #248]	; (8000884 <HAL_RCC_OscConfig+0x2e8>)
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	2302      	movs	r3, #2
 8000790:	fa93 f3a3 	rbit	r3, r3
 8000794:	fab3 f383 	clz	r3, r3
 8000798:	f003 031f 	and.w	r3, r3, #31
 800079c:	fa22 f303 	lsr.w	r3, r2, r3
 80007a0:	f013 0f01 	tst.w	r3, #1
 80007a4:	d0e8      	beq.n	8000778 <HAL_RCC_OscConfig+0x1dc>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80007a6:	4837      	ldr	r0, [pc, #220]	; (8000884 <HAL_RCC_OscConfig+0x2e8>)
 80007a8:	6803      	ldr	r3, [r0, #0]
 80007aa:	f023 01f8 	bic.w	r1, r3, #248	; 0xf8
 80007ae:	6963      	ldr	r3, [r4, #20]
 80007b0:	22f8      	movs	r2, #248	; 0xf8
 80007b2:	fa92 f2a2 	rbit	r2, r2
 80007b6:	fab2 f282 	clz	r2, r2
 80007ba:	4093      	lsls	r3, r2
 80007bc:	430b      	orrs	r3, r1
 80007be:	6003      	str	r3, [r0, #0]
 80007c0:	e026      	b.n	8000810 <HAL_RCC_OscConfig+0x274>
 80007c2:	2301      	movs	r3, #1
 80007c4:	fa93 f3a3 	rbit	r3, r3
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80007c8:	fab3 f383 	clz	r3, r3
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80007d2:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80007da:	f7ff fd83 	bl	80002e4 <HAL_GetTick>
 80007de:	4605      	mov	r5, r0
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80007e0:	e005      	b.n	80007ee <HAL_RCC_OscConfig+0x252>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80007e2:	f7ff fd7f 	bl	80002e4 <HAL_GetTick>
 80007e6:	1b40      	subs	r0, r0, r5
 80007e8:	2802      	cmp	r0, #2
 80007ea:	f200 81c8 	bhi.w	8000b7e <HAL_RCC_OscConfig+0x5e2>
 80007ee:	2302      	movs	r3, #2
 80007f0:	fa93 f3a3 	rbit	r3, r3
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80007f4:	4b23      	ldr	r3, [pc, #140]	; (8000884 <HAL_RCC_OscConfig+0x2e8>)
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	2302      	movs	r3, #2
 80007fa:	fa93 f3a3 	rbit	r3, r3
 80007fe:	fab3 f383 	clz	r3, r3
 8000802:	f003 031f 	and.w	r3, r3, #31
 8000806:	fa22 f303 	lsr.w	r3, r2, r3
 800080a:	f013 0f01 	tst.w	r3, #1
 800080e:	d1e8      	bne.n	80007e2 <HAL_RCC_OscConfig+0x246>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000810:	6823      	ldr	r3, [r4, #0]
 8000812:	f013 0f08 	tst.w	r3, #8
 8000816:	d053      	beq.n	80008c0 <HAL_RCC_OscConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000818:	69a3      	ldr	r3, [r4, #24]
 800081a:	b333      	cbz	r3, 800086a <HAL_RCC_OscConfig+0x2ce>
 800081c:	2201      	movs	r2, #1
 800081e:	fa92 f3a2 	rbit	r3, r2
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000822:	fab3 f383 	clz	r3, r3
 8000826:	4918      	ldr	r1, [pc, #96]	; (8000888 <HAL_RCC_OscConfig+0x2ec>)
 8000828:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800082c:	f7ff fd5a 	bl	80002e4 <HAL_GetTick>
 8000830:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000832:	e005      	b.n	8000840 <HAL_RCC_OscConfig+0x2a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000834:	f7ff fd56 	bl	80002e4 <HAL_GetTick>
 8000838:	1b40      	subs	r0, r0, r5
 800083a:	2802      	cmp	r0, #2
 800083c:	f200 81a1 	bhi.w	8000b82 <HAL_RCC_OscConfig+0x5e6>
 8000840:	2302      	movs	r3, #2
 8000842:	fa93 f2a3 	rbit	r2, r3
 8000846:	fa93 f2a3 	rbit	r2, r3
 800084a:	fa93 f2a3 	rbit	r2, r3
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800084e:	4a0d      	ldr	r2, [pc, #52]	; (8000884 <HAL_RCC_OscConfig+0x2e8>)
 8000850:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000852:	fa93 f3a3 	rbit	r3, r3
 8000856:	fab3 f383 	clz	r3, r3
 800085a:	f003 031f 	and.w	r3, r3, #31
 800085e:	fa22 f303 	lsr.w	r3, r2, r3
 8000862:	f013 0f01 	tst.w	r3, #1
 8000866:	d0e5      	beq.n	8000834 <HAL_RCC_OscConfig+0x298>
 8000868:	e02a      	b.n	80008c0 <HAL_RCC_OscConfig+0x324>
 800086a:	2301      	movs	r3, #1
 800086c:	fa93 f3a3 	rbit	r3, r3
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000870:	fab3 f383 	clz	r3, r3
 8000874:	2100      	movs	r1, #0
 8000876:	4a04      	ldr	r2, [pc, #16]	; (8000888 <HAL_RCC_OscConfig+0x2ec>)
 8000878:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800087c:	f7ff fd32 	bl	80002e4 <HAL_GetTick>
 8000880:	4605      	mov	r5, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000882:	e009      	b.n	8000898 <HAL_RCC_OscConfig+0x2fc>
 8000884:	40021000 	.word	0x40021000
 8000888:	42420480 	.word	0x42420480
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800088c:	f7ff fd2a 	bl	80002e4 <HAL_GetTick>
 8000890:	1b40      	subs	r0, r0, r5
 8000892:	2802      	cmp	r0, #2
 8000894:	f200 8177 	bhi.w	8000b86 <HAL_RCC_OscConfig+0x5ea>
 8000898:	2302      	movs	r3, #2
 800089a:	fa93 f2a3 	rbit	r2, r3
 800089e:	fa93 f2a3 	rbit	r2, r3
 80008a2:	fa93 f2a3 	rbit	r2, r3
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80008a6:	4ac0      	ldr	r2, [pc, #768]	; (8000ba8 <HAL_RCC_OscConfig+0x60c>)
 80008a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80008aa:	fa93 f3a3 	rbit	r3, r3
 80008ae:	fab3 f383 	clz	r3, r3
 80008b2:	f003 031f 	and.w	r3, r3, #31
 80008b6:	fa22 f303 	lsr.w	r3, r2, r3
 80008ba:	f013 0f01 	tst.w	r3, #1
 80008be:	d1e5      	bne.n	800088c <HAL_RCC_OscConfig+0x2f0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80008c0:	6823      	ldr	r3, [r4, #0]
 80008c2:	f013 0f04 	tst.w	r3, #4
 80008c6:	f000 80ba 	beq.w	8000a3e <HAL_RCC_OscConfig+0x4a2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80008ca:	4bb7      	ldr	r3, [pc, #732]	; (8000ba8 <HAL_RCC_OscConfig+0x60c>)
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80008d2:	d10b      	bne.n	80008ec <HAL_RCC_OscConfig+0x350>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80008d4:	4bb4      	ldr	r3, [pc, #720]	; (8000ba8 <HAL_RCC_OscConfig+0x60c>)
 80008d6:	69da      	ldr	r2, [r3, #28]
 80008d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80008dc:	61da      	str	r2, [r3, #28]
 80008de:	69db      	ldr	r3, [r3, #28]
 80008e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e4:	9301      	str	r3, [sp, #4]
 80008e6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80008e8:	2501      	movs	r5, #1
 80008ea:	e000      	b.n	80008ee <HAL_RCC_OscConfig+0x352>
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 80008ec:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80008ee:	4baf      	ldr	r3, [pc, #700]	; (8000bac <HAL_RCC_OscConfig+0x610>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80008f6:	d113      	bne.n	8000920 <HAL_RCC_OscConfig+0x384>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80008f8:	4aac      	ldr	r2, [pc, #688]	; (8000bac <HAL_RCC_OscConfig+0x610>)
 80008fa:	6813      	ldr	r3, [r2, #0]
 80008fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000900:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000902:	f7ff fcef 	bl	80002e4 <HAL_GetTick>
 8000906:	4606      	mov	r6, r0

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000908:	e005      	b.n	8000916 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800090a:	f7ff fceb 	bl	80002e4 <HAL_GetTick>
 800090e:	1b80      	subs	r0, r0, r6
 8000910:	2864      	cmp	r0, #100	; 0x64
 8000912:	f200 813a 	bhi.w	8000b8a <HAL_RCC_OscConfig+0x5ee>
      SET_BIT(PWR->CR, PWR_CR_DBP);
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000916:	4ba5      	ldr	r3, [pc, #660]	; (8000bac <HAL_RCC_OscConfig+0x610>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800091e:	d0f4      	beq.n	800090a <HAL_RCC_OscConfig+0x36e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000920:	68e3      	ldr	r3, [r4, #12]
 8000922:	2b01      	cmp	r3, #1
 8000924:	d105      	bne.n	8000932 <HAL_RCC_OscConfig+0x396>
 8000926:	4aa0      	ldr	r2, [pc, #640]	; (8000ba8 <HAL_RCC_OscConfig+0x60c>)
 8000928:	6a13      	ldr	r3, [r2, #32]
 800092a:	f043 0301 	orr.w	r3, r3, #1
 800092e:	6213      	str	r3, [r2, #32]
 8000930:	e022      	b.n	8000978 <HAL_RCC_OscConfig+0x3dc>
 8000932:	b963      	cbnz	r3, 800094e <HAL_RCC_OscConfig+0x3b2>
 8000934:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000938:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800093c:	6a1a      	ldr	r2, [r3, #32]
 800093e:	f022 0201 	bic.w	r2, r2, #1
 8000942:	621a      	str	r2, [r3, #32]
 8000944:	6a1a      	ldr	r2, [r3, #32]
 8000946:	f022 0204 	bic.w	r2, r2, #4
 800094a:	621a      	str	r2, [r3, #32]
 800094c:	e014      	b.n	8000978 <HAL_RCC_OscConfig+0x3dc>
 800094e:	2b05      	cmp	r3, #5
 8000950:	d109      	bne.n	8000966 <HAL_RCC_OscConfig+0x3ca>
 8000952:	4b95      	ldr	r3, [pc, #596]	; (8000ba8 <HAL_RCC_OscConfig+0x60c>)
 8000954:	6a1a      	ldr	r2, [r3, #32]
 8000956:	f042 0204 	orr.w	r2, r2, #4
 800095a:	621a      	str	r2, [r3, #32]
 800095c:	6a1a      	ldr	r2, [r3, #32]
 800095e:	f042 0201 	orr.w	r2, r2, #1
 8000962:	621a      	str	r2, [r3, #32]
 8000964:	e008      	b.n	8000978 <HAL_RCC_OscConfig+0x3dc>
 8000966:	4b90      	ldr	r3, [pc, #576]	; (8000ba8 <HAL_RCC_OscConfig+0x60c>)
 8000968:	6a1a      	ldr	r2, [r3, #32]
 800096a:	f022 0201 	bic.w	r2, r2, #1
 800096e:	621a      	str	r2, [r3, #32]
 8000970:	6a1a      	ldr	r2, [r3, #32]
 8000972:	f022 0204 	bic.w	r2, r2, #4
 8000976:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000978:	68e3      	ldr	r3, [r4, #12]
 800097a:	b36b      	cbz	r3, 80009d8 <HAL_RCC_OscConfig+0x43c>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800097c:	f7ff fcb2 	bl	80002e4 <HAL_GetTick>
 8000980:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000982:	e007      	b.n	8000994 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000984:	f7ff fcae 	bl	80002e4 <HAL_GetTick>
 8000988:	1b80      	subs	r0, r0, r6
 800098a:	f241 3388 	movw	r3, #5000	; 0x1388
 800098e:	4298      	cmp	r0, r3
 8000990:	f200 80fd 	bhi.w	8000b8e <HAL_RCC_OscConfig+0x5f2>
 8000994:	2302      	movs	r3, #2
 8000996:	fa93 f2a3 	rbit	r2, r3
 800099a:	fa93 f3a3 	rbit	r3, r3
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800099e:	fab3 f383 	clz	r3, r3
 80009a2:	095b      	lsrs	r3, r3, #5
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	2b02      	cmp	r3, #2
 80009ac:	d102      	bne.n	80009b4 <HAL_RCC_OscConfig+0x418>
 80009ae:	4b7e      	ldr	r3, [pc, #504]	; (8000ba8 <HAL_RCC_OscConfig+0x60c>)
 80009b0:	6a1a      	ldr	r2, [r3, #32]
 80009b2:	e004      	b.n	80009be <HAL_RCC_OscConfig+0x422>
 80009b4:	2302      	movs	r3, #2
 80009b6:	fa93 f3a3 	rbit	r3, r3
 80009ba:	4b7b      	ldr	r3, [pc, #492]	; (8000ba8 <HAL_RCC_OscConfig+0x60c>)
 80009bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009be:	2302      	movs	r3, #2
 80009c0:	fa93 f3a3 	rbit	r3, r3
 80009c4:	fab3 f383 	clz	r3, r3
 80009c8:	f003 031f 	and.w	r3, r3, #31
 80009cc:	fa22 f303 	lsr.w	r3, r2, r3
 80009d0:	f013 0f01 	tst.w	r3, #1
 80009d4:	d0d6      	beq.n	8000984 <HAL_RCC_OscConfig+0x3e8>
 80009d6:	e02c      	b.n	8000a32 <HAL_RCC_OscConfig+0x496>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009d8:	f7ff fc84 	bl	80002e4 <HAL_GetTick>
 80009dc:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80009de:	e007      	b.n	80009f0 <HAL_RCC_OscConfig+0x454>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009e0:	f7ff fc80 	bl	80002e4 <HAL_GetTick>
 80009e4:	1b80      	subs	r0, r0, r6
 80009e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80009ea:	4298      	cmp	r0, r3
 80009ec:	f200 80d1 	bhi.w	8000b92 <HAL_RCC_OscConfig+0x5f6>
 80009f0:	2302      	movs	r3, #2
 80009f2:	fa93 f2a3 	rbit	r2, r3
 80009f6:	fa93 f3a3 	rbit	r3, r3
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80009fa:	fab3 f383 	clz	r3, r3
 80009fe:	095b      	lsrs	r3, r3, #5
 8000a00:	f043 0302 	orr.w	r3, r3, #2
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	2b02      	cmp	r3, #2
 8000a08:	d102      	bne.n	8000a10 <HAL_RCC_OscConfig+0x474>
 8000a0a:	4b67      	ldr	r3, [pc, #412]	; (8000ba8 <HAL_RCC_OscConfig+0x60c>)
 8000a0c:	6a1a      	ldr	r2, [r3, #32]
 8000a0e:	e004      	b.n	8000a1a <HAL_RCC_OscConfig+0x47e>
 8000a10:	2302      	movs	r3, #2
 8000a12:	fa93 f3a3 	rbit	r3, r3
 8000a16:	4b64      	ldr	r3, [pc, #400]	; (8000ba8 <HAL_RCC_OscConfig+0x60c>)
 8000a18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	fa93 f3a3 	rbit	r3, r3
 8000a20:	fab3 f383 	clz	r3, r3
 8000a24:	f003 031f 	and.w	r3, r3, #31
 8000a28:	fa22 f303 	lsr.w	r3, r2, r3
 8000a2c:	f013 0f01 	tst.w	r3, #1
 8000a30:	d1d6      	bne.n	80009e0 <HAL_RCC_OscConfig+0x444>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000a32:	b125      	cbz	r5, 8000a3e <HAL_RCC_OscConfig+0x4a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a34:	4a5c      	ldr	r2, [pc, #368]	; (8000ba8 <HAL_RCC_OscConfig+0x60c>)
 8000a36:	69d3      	ldr	r3, [r2, #28]
 8000a38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a3c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000a3e:	69e3      	ldr	r3, [r4, #28]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	f000 80a8 	beq.w	8000b96 <HAL_RCC_OscConfig+0x5fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a46:	4a58      	ldr	r2, [pc, #352]	; (8000ba8 <HAL_RCC_OscConfig+0x60c>)
 8000a48:	6852      	ldr	r2, [r2, #4]
 8000a4a:	f002 020c 	and.w	r2, r2, #12
 8000a4e:	2a08      	cmp	r2, #8
 8000a50:	f000 80a3 	beq.w	8000b9a <HAL_RCC_OscConfig+0x5fe>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a54:	2b02      	cmp	r3, #2
 8000a56:	d15d      	bne.n	8000b14 <HAL_RCC_OscConfig+0x578>
 8000a58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a5c:	fa93 f3a3 	rbit	r3, r3
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000a60:	fab3 f383 	clz	r3, r3
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000a6a:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a72:	f7ff fc37 	bl	80002e4 <HAL_GetTick>
 8000a76:	4605      	mov	r5, r0
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a78:	e005      	b.n	8000a86 <HAL_RCC_OscConfig+0x4ea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a7a:	f7ff fc33 	bl	80002e4 <HAL_GetTick>
 8000a7e:	1b40      	subs	r0, r0, r5
 8000a80:	2802      	cmp	r0, #2
 8000a82:	f200 808c 	bhi.w	8000b9e <HAL_RCC_OscConfig+0x602>
 8000a86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a8a:	fa93 f3a3 	rbit	r3, r3
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a8e:	4b46      	ldr	r3, [pc, #280]	; (8000ba8 <HAL_RCC_OscConfig+0x60c>)
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a96:	fa93 f3a3 	rbit	r3, r3
 8000a9a:	fab3 f383 	clz	r3, r3
 8000a9e:	f003 031f 	and.w	r3, r3, #31
 8000aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8000aa6:	f013 0f01 	tst.w	r3, #1
 8000aaa:	d1e6      	bne.n	8000a7a <HAL_RCC_OscConfig+0x4de>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000aac:	483e      	ldr	r0, [pc, #248]	; (8000ba8 <HAL_RCC_OscConfig+0x60c>)
 8000aae:	6843      	ldr	r3, [r0, #4]
 8000ab0:	f423 1174 	bic.w	r1, r3, #3997696	; 0x3d0000
 8000ab4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ab6:	6a22      	ldr	r2, [r4, #32]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	430b      	orrs	r3, r1
 8000abc:	6043      	str	r3, [r0, #4]
 8000abe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ac2:	fa93 f3a3 	rbit	r3, r3
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ac6:	fab3 f383 	clz	r3, r3
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000ad0:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ad8:	f7ff fc04 	bl	80002e4 <HAL_GetTick>
 8000adc:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ade:	e004      	b.n	8000aea <HAL_RCC_OscConfig+0x54e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ae0:	f7ff fc00 	bl	80002e4 <HAL_GetTick>
 8000ae4:	1b00      	subs	r0, r0, r4
 8000ae6:	2802      	cmp	r0, #2
 8000ae8:	d85b      	bhi.n	8000ba2 <HAL_RCC_OscConfig+0x606>
 8000aea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000aee:	fa93 f3a3 	rbit	r3, r3
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000af2:	4b2d      	ldr	r3, [pc, #180]	; (8000ba8 <HAL_RCC_OscConfig+0x60c>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000afa:	fa93 f3a3 	rbit	r3, r3
 8000afe:	fab3 f383 	clz	r3, r3
 8000b02:	f003 031f 	and.w	r3, r3, #31
 8000b06:	fa22 f303 	lsr.w	r3, r2, r3
 8000b0a:	f013 0f01 	tst.w	r3, #1
 8000b0e:	d0e7      	beq.n	8000ae0 <HAL_RCC_OscConfig+0x544>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000b10:	2000      	movs	r0, #0
 8000b12:	e04e      	b.n	8000bb2 <HAL_RCC_OscConfig+0x616>
 8000b14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b18:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b1c:	fab3 f383 	clz	r3, r3
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000b26:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b2e:	f7ff fbd9 	bl	80002e4 <HAL_GetTick>
 8000b32:	4604      	mov	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b34:	e004      	b.n	8000b40 <HAL_RCC_OscConfig+0x5a4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b36:	f7ff fbd5 	bl	80002e4 <HAL_GetTick>
 8000b3a:	1b00      	subs	r0, r0, r4
 8000b3c:	2802      	cmp	r0, #2
 8000b3e:	d837      	bhi.n	8000bb0 <HAL_RCC_OscConfig+0x614>
 8000b40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b44:	fa93 f3a3 	rbit	r3, r3
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b48:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <HAL_RCC_OscConfig+0x60c>)
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b50:	fa93 f3a3 	rbit	r3, r3
 8000b54:	fab3 f383 	clz	r3, r3
 8000b58:	f003 031f 	and.w	r3, r3, #31
 8000b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000b60:	f013 0f01 	tst.w	r3, #1
 8000b64:	d1e7      	bne.n	8000b36 <HAL_RCC_OscConfig+0x59a>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000b66:	2000      	movs	r0, #0
 8000b68:	e023      	b.n	8000bb2 <HAL_RCC_OscConfig+0x616>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
      {
        return HAL_ERROR;
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	e021      	b.n	8000bb2 <HAL_RCC_OscConfig+0x616>
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8000b6e:	2003      	movs	r0, #3
 8000b70:	e01f      	b.n	8000bb2 <HAL_RCC_OscConfig+0x616>
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8000b72:	2003      	movs	r0, #3
 8000b74:	e01d      	b.n	8000bb2 <HAL_RCC_OscConfig+0x616>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
      {
        return HAL_ERROR;
 8000b76:	2001      	movs	r0, #1
 8000b78:	e01b      	b.n	8000bb2 <HAL_RCC_OscConfig+0x616>
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8000b7a:	2003      	movs	r0, #3
 8000b7c:	e019      	b.n	8000bb2 <HAL_RCC_OscConfig+0x616>
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8000b7e:	2003      	movs	r0, #3
 8000b80:	e017      	b.n	8000bb2 <HAL_RCC_OscConfig+0x616>
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8000b82:	2003      	movs	r0, #3
 8000b84:	e015      	b.n	8000bb2 <HAL_RCC_OscConfig+0x616>
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8000b86:	2003      	movs	r0, #3
 8000b88:	e013      	b.n	8000bb2 <HAL_RCC_OscConfig+0x616>

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8000b8a:	2003      	movs	r0, #3
 8000b8c:	e011      	b.n	8000bb2 <HAL_RCC_OscConfig+0x616>
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8000b8e:	2003      	movs	r0, #3
 8000b90:	e00f      	b.n	8000bb2 <HAL_RCC_OscConfig+0x616>
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8000b92:	2003      	movs	r0, #3
 8000b94:	e00d      	b.n	8000bb2 <HAL_RCC_OscConfig+0x616>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000b96:	2000      	movs	r0, #0
 8000b98:	e00b      	b.n	8000bb2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	e009      	b.n	8000bb2 <HAL_RCC_OscConfig+0x616>
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8000b9e:	2003      	movs	r0, #3
 8000ba0:	e007      	b.n	8000bb2 <HAL_RCC_OscConfig+0x616>
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8000ba2:	2003      	movs	r0, #3
 8000ba4:	e005      	b.n	8000bb2 <HAL_RCC_OscConfig+0x616>
 8000ba6:	bf00      	nop
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	40007000 	.word	0x40007000
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
          {
            return HAL_TIMEOUT;
 8000bb0:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8000bb2:	b002      	add	sp, #8
 8000bb4:	bd70      	pop	{r4, r5, r6, pc}
 8000bb6:	bf00      	nop

08000bb8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8000bb8:	4b16      	ldr	r3, [pc, #88]	; (8000c14 <HAL_RCC_GetSysClockFreq+0x5c>)
 8000bba:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000bbc:	f003 020c 	and.w	r2, r3, #12
 8000bc0:	2a08      	cmp	r2, #8
 8000bc2:	d125      	bne.n	8000c10 <HAL_RCC_GetSysClockFreq+0x58>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000bc4:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 8000bc8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000bcc:	fa92 f2a2 	rbit	r2, r2
 8000bd0:	fab2 f282 	clz	r2, r2
 8000bd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000bd8:	490f      	ldr	r1, [pc, #60]	; (8000c18 <HAL_RCC_GetSysClockFreq+0x60>)
 8000bda:	5c8a      	ldrb	r2, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000bdc:	490d      	ldr	r1, [pc, #52]	; (8000c14 <HAL_RCC_GetSysClockFreq+0x5c>)
 8000bde:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8000be0:	f001 000f 	and.w	r0, r1, #15
 8000be4:	210f      	movs	r1, #15
 8000be6:	fa91 f1a1 	rbit	r1, r1
 8000bea:	fab1 f181 	clz	r1, r1
 8000bee:	fa20 f101 	lsr.w	r1, r0, r1
 8000bf2:	480a      	ldr	r0, [pc, #40]	; (8000c1c <HAL_RCC_GetSysClockFreq+0x64>)
 8000bf4:	5c40      	ldrb	r0, [r0, r1]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8000bf6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000bfa:	d005      	beq.n	8000c08 <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000bfc:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <HAL_RCC_GetSysClockFreq+0x68>)
 8000bfe:	fbb3 f0f0 	udiv	r0, r3, r0
 8000c02:	fb00 f002 	mul.w	r0, r0, r2
 8000c06:	4770      	bx	lr
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1) * pllmul;
 8000c08:	4806      	ldr	r0, [pc, #24]	; (8000c24 <HAL_RCC_GetSysClockFreq+0x6c>)
 8000c0a:	fb00 f002 	mul.w	r0, r0, r2
 8000c0e:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000c10:	4803      	ldr	r0, [pc, #12]	; (8000c20 <HAL_RCC_GetSysClockFreq+0x68>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000c12:	4770      	bx	lr
 8000c14:	40021000 	.word	0x40021000
 8000c18:	080011fc 	.word	0x080011fc
 8000c1c:	080011ec 	.word	0x080011ec
 8000c20:	007a1200 	.word	0x007a1200
 8000c24:	003d0900 	.word	0x003d0900

08000c28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c28:	b570      	push	{r4, r5, r6, lr}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c2a:	4b74      	ldr	r3, [pc, #464]	; (8000dfc <HAL_RCC_ClockConfig+0x1d4>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d20b      	bcs.n	8000c4e <HAL_RCC_ClockConfig+0x26>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c36:	4a71      	ldr	r2, [pc, #452]	; (8000dfc <HAL_RCC_ClockConfig+0x1d4>)
 8000c38:	6813      	ldr	r3, [r2, #0]
 8000c3a:	f023 0307 	bic.w	r3, r3, #7
 8000c3e:	430b      	orrs	r3, r1
 8000c40:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000c42:	6813      	ldr	r3, [r2, #0]
 8000c44:	f003 0307 	and.w	r3, r3, #7
 8000c48:	4299      	cmp	r1, r3
 8000c4a:	f040 80c6 	bne.w	8000dda <HAL_RCC_ClockConfig+0x1b2>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c4e:	6803      	ldr	r3, [r0, #0]
 8000c50:	f013 0f02 	tst.w	r3, #2
 8000c54:	d006      	beq.n	8000c64 <HAL_RCC_ClockConfig+0x3c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c56:	4c6a      	ldr	r4, [pc, #424]	; (8000e00 <HAL_RCC_ClockConfig+0x1d8>)
 8000c58:	6863      	ldr	r3, [r4, #4]
 8000c5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c5e:	6883      	ldr	r3, [r0, #8]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	6063      	str	r3, [r4, #4]
 8000c64:	460d      	mov	r5, r1
 8000c66:	4604      	mov	r4, r0
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c68:	6803      	ldr	r3, [r0, #0]
 8000c6a:	f013 0f01 	tst.w	r3, #1
 8000c6e:	d075      	beq.n	8000d5c <HAL_RCC_ClockConfig+0x134>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c70:	6842      	ldr	r2, [r0, #4]
 8000c72:	2a01      	cmp	r2, #1
 8000c74:	d113      	bne.n	8000c9e <HAL_RCC_ClockConfig+0x76>
 8000c76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c7a:	fa93 f3a3 	rbit	r3, r3
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c7e:	4b60      	ldr	r3, [pc, #384]	; (8000e00 <HAL_RCC_ClockConfig+0x1d8>)
 8000c80:	6819      	ldr	r1, [r3, #0]
 8000c82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c86:	fa93 f3a3 	rbit	r3, r3
 8000c8a:	fab3 f383 	clz	r3, r3
 8000c8e:	f003 031f 	and.w	r3, r3, #31
 8000c92:	fa21 f303 	lsr.w	r3, r1, r3
 8000c96:	f013 0f01 	tst.w	r3, #1
 8000c9a:	d127      	bne.n	8000cec <HAL_RCC_ClockConfig+0xc4>
 8000c9c:	e09f      	b.n	8000dde <HAL_RCC_ClockConfig+0x1b6>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000c9e:	2a02      	cmp	r2, #2
 8000ca0:	d113      	bne.n	8000cca <HAL_RCC_ClockConfig+0xa2>
 8000ca2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ca6:	fa93 f3a3 	rbit	r3, r3
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000caa:	4b55      	ldr	r3, [pc, #340]	; (8000e00 <HAL_RCC_ClockConfig+0x1d8>)
 8000cac:	6819      	ldr	r1, [r3, #0]
 8000cae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000cb2:	fa93 f3a3 	rbit	r3, r3
 8000cb6:	fab3 f383 	clz	r3, r3
 8000cba:	f003 031f 	and.w	r3, r3, #31
 8000cbe:	fa21 f303 	lsr.w	r3, r1, r3
 8000cc2:	f013 0f01 	tst.w	r3, #1
 8000cc6:	d111      	bne.n	8000cec <HAL_RCC_ClockConfig+0xc4>
 8000cc8:	e08b      	b.n	8000de2 <HAL_RCC_ClockConfig+0x1ba>
 8000cca:	2302      	movs	r3, #2
 8000ccc:	fa93 f3a3 	rbit	r3, r3
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cd0:	4b4b      	ldr	r3, [pc, #300]	; (8000e00 <HAL_RCC_ClockConfig+0x1d8>)
 8000cd2:	6819      	ldr	r1, [r3, #0]
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	fa93 f3a3 	rbit	r3, r3
 8000cda:	fab3 f383 	clz	r3, r3
 8000cde:	f003 031f 	and.w	r3, r3, #31
 8000ce2:	fa21 f303 	lsr.w	r3, r1, r3
 8000ce6:	f013 0f01 	tst.w	r3, #1
 8000cea:	d07c      	beq.n	8000de6 <HAL_RCC_ClockConfig+0x1be>
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cec:	4944      	ldr	r1, [pc, #272]	; (8000e00 <HAL_RCC_ClockConfig+0x1d8>)
 8000cee:	684b      	ldr	r3, [r1, #4]
 8000cf0:	f023 0303 	bic.w	r3, r3, #3
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000cf8:	f7ff faf4 	bl	80002e4 <HAL_GetTick>
 8000cfc:	4606      	mov	r6, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cfe:	6863      	ldr	r3, [r4, #4]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d10e      	bne.n	8000d22 <HAL_RCC_ClockConfig+0xfa>
 8000d04:	e006      	b.n	8000d14 <HAL_RCC_ClockConfig+0xec>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d06:	f7ff faed 	bl	80002e4 <HAL_GetTick>
 8000d0a:	1b80      	subs	r0, r0, r6
 8000d0c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d10:	4298      	cmp	r0, r3
 8000d12:	d86a      	bhi.n	8000dea <HAL_RCC_ClockConfig+0x1c2>
    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d14:	4b3a      	ldr	r3, [pc, #232]	; (8000e00 <HAL_RCC_ClockConfig+0x1d8>)
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f003 030c 	and.w	r3, r3, #12
 8000d1c:	2b04      	cmp	r3, #4
 8000d1e:	d1f2      	bne.n	8000d06 <HAL_RCC_ClockConfig+0xde>
 8000d20:	e01c      	b.n	8000d5c <HAL_RCC_ClockConfig+0x134>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d115      	bne.n	8000d52 <HAL_RCC_ClockConfig+0x12a>
 8000d26:	e006      	b.n	8000d36 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d28:	f7ff fadc 	bl	80002e4 <HAL_GetTick>
 8000d2c:	1b80      	subs	r0, r0, r6
 8000d2e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d32:	4298      	cmp	r0, r3
 8000d34:	d85b      	bhi.n	8000dee <HAL_RCC_ClockConfig+0x1c6>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d36:	4b32      	ldr	r3, [pc, #200]	; (8000e00 <HAL_RCC_ClockConfig+0x1d8>)
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f003 030c 	and.w	r3, r3, #12
 8000d3e:	2b08      	cmp	r3, #8
 8000d40:	d1f2      	bne.n	8000d28 <HAL_RCC_ClockConfig+0x100>
 8000d42:	e00b      	b.n	8000d5c <HAL_RCC_ClockConfig+0x134>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d44:	f7ff face 	bl	80002e4 <HAL_GetTick>
 8000d48:	1b80      	subs	r0, r0, r6
 8000d4a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d4e:	4298      	cmp	r0, r3
 8000d50:	d84f      	bhi.n	8000df2 <HAL_RCC_ClockConfig+0x1ca>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d52:	4b2b      	ldr	r3, [pc, #172]	; (8000e00 <HAL_RCC_ClockConfig+0x1d8>)
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f013 0f0c 	tst.w	r3, #12
 8000d5a:	d1f3      	bne.n	8000d44 <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d5c:	4b27      	ldr	r3, [pc, #156]	; (8000dfc <HAL_RCC_ClockConfig+0x1d4>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f003 0307 	and.w	r3, r3, #7
 8000d64:	429d      	cmp	r5, r3
 8000d66:	d20a      	bcs.n	8000d7e <HAL_RCC_ClockConfig+0x156>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d68:	4a24      	ldr	r2, [pc, #144]	; (8000dfc <HAL_RCC_ClockConfig+0x1d4>)
 8000d6a:	6813      	ldr	r3, [r2, #0]
 8000d6c:	f023 0307 	bic.w	r3, r3, #7
 8000d70:	432b      	orrs	r3, r5
 8000d72:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d74:	6813      	ldr	r3, [r2, #0]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	429d      	cmp	r5, r3
 8000d7c:	d13b      	bne.n	8000df6 <HAL_RCC_ClockConfig+0x1ce>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d7e:	6823      	ldr	r3, [r4, #0]
 8000d80:	f013 0f04 	tst.w	r3, #4
 8000d84:	d006      	beq.n	8000d94 <HAL_RCC_ClockConfig+0x16c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d86:	491e      	ldr	r1, [pc, #120]	; (8000e00 <HAL_RCC_ClockConfig+0x1d8>)
 8000d88:	684b      	ldr	r3, [r1, #4]
 8000d8a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000d8e:	68e3      	ldr	r3, [r4, #12]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d94:	6823      	ldr	r3, [r4, #0]
 8000d96:	f013 0f08 	tst.w	r3, #8
 8000d9a:	d007      	beq.n	8000dac <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000d9c:	4a18      	ldr	r2, [pc, #96]	; (8000e00 <HAL_RCC_ClockConfig+0x1d8>)
 8000d9e:	6853      	ldr	r3, [r2, #4]
 8000da0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000da4:	6921      	ldr	r1, [r4, #16]
 8000da6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000daa:	6053      	str	r3, [r2, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000dac:	f7ff ff04 	bl	8000bb8 <HAL_RCC_GetSysClockFreq>
 8000db0:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <HAL_RCC_ClockConfig+0x1d8>)
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000db8:	23f0      	movs	r3, #240	; 0xf0
 8000dba:	fa93 f3a3 	rbit	r3, r3
 8000dbe:	fab3 f383 	clz	r3, r3
 8000dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8000dc6:	4a0f      	ldr	r2, [pc, #60]	; (8000e04 <HAL_RCC_ClockConfig+0x1dc>)
 8000dc8:	5cd3      	ldrb	r3, [r2, r3]
 8000dca:	40d8      	lsrs	r0, r3
 8000dcc:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <HAL_RCC_ClockConfig+0x1e0>)
 8000dce:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	f7ff fa57 	bl	8000284 <HAL_InitTick>
  
  return HAL_OK;
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	bd70      	pop	{r4, r5, r6, pc}
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
    {
      return HAL_ERROR;
 8000dda:	2001      	movs	r0, #1
 8000ddc:	bd70      	pop	{r4, r5, r6, pc}
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
      {
        return HAL_ERROR;
 8000dde:	2001      	movs	r0, #1
 8000de0:	bd70      	pop	{r4, r5, r6, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
      {
        return HAL_ERROR;
 8000de2:	2001      	movs	r0, #1
 8000de4:	bd70      	pop	{r4, r5, r6, pc}
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
      {
        return HAL_ERROR;
 8000de6:	2001      	movs	r0, #1
 8000de8:	bd70      	pop	{r4, r5, r6, pc}
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8000dea:	2003      	movs	r0, #3
 8000dec:	bd70      	pop	{r4, r5, r6, pc}
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8000dee:	2003      	movs	r0, #3
 8000df0:	bd70      	pop	{r4, r5, r6, pc}
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
        {
          return HAL_TIMEOUT;
 8000df2:	2003      	movs	r0, #3
 8000df4:	bd70      	pop	{r4, r5, r6, pc}
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
    {
      return HAL_ERROR;
 8000df6:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8000df8:	bd70      	pop	{r4, r5, r6, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40022000 	.word	0x40022000
 8000e00:	40021000 	.word	0x40021000
 8000e04:	080011dc 	.word	0x080011dc
 8000e08:	20000000 	.word	0x20000000

08000e0c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000e0c:	4b01      	ldr	r3, [pc, #4]	; (8000e14 <HAL_RCC_GetHCLKFreq+0x8>)
 8000e0e:	6818      	ldr	r0, [r3, #0]
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	20000000 	.word	0x20000000

08000e18 <MX_GPIO_Init>:
     PA12   ------> USB_DP
     PB6   ------> I2C1_SCL
     PB7   ------> I2C1_SDA
*/
static void MX_GPIO_Init(void)
{
 8000e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e1c:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e1e:	4b3f      	ldr	r3, [pc, #252]	; (8000f1c <MX_GPIO_Init+0x104>)
 8000e20:	695a      	ldr	r2, [r3, #20]
 8000e22:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000e26:	615a      	str	r2, [r3, #20]
 8000e28:	695a      	ldr	r2, [r3, #20]
 8000e2a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8000e2e:	9200      	str	r2, [sp, #0]
 8000e30:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e32:	695a      	ldr	r2, [r3, #20]
 8000e34:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000e38:	615a      	str	r2, [r3, #20]
 8000e3a:	695a      	ldr	r2, [r3, #20]
 8000e3c:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8000e40:	9201      	str	r2, [sp, #4]
 8000e42:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e44:	695a      	ldr	r2, [r3, #20]
 8000e46:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000e4a:	615a      	str	r2, [r3, #20]
 8000e4c:	695a      	ldr	r2, [r3, #20]
 8000e4e:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8000e52:	9202      	str	r2, [sp, #8]
 8000e54:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	695a      	ldr	r2, [r3, #20]
 8000e58:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000e5c:	615a      	str	r2, [r3, #20]
 8000e5e:	695a      	ldr	r2, [r3, #20]
 8000e60:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000e64:	9203      	str	r2, [sp, #12]
 8000e66:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e68:	695a      	ldr	r2, [r3, #20]
 8000e6a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000e6e:	615a      	str	r2, [r3, #20]
 8000e70:	695b      	ldr	r3, [r3, #20]
 8000e72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e76:	9304      	str	r3, [sp, #16]
 8000e78:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin 
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin 
 8000e7a:	2337      	movs	r3, #55	; 0x37
 8000e7c:	9305      	str	r3, [sp, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e7e:	4b28      	ldr	r3, [pc, #160]	; (8000f20 <MX_GPIO_Init+0x108>)
 8000e80:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2400      	movs	r4, #0
 8000e84:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e86:	4d27      	ldr	r5, [pc, #156]	; (8000f24 <MX_GPIO_Init+0x10c>)
 8000e88:	a905      	add	r1, sp, #20
 8000e8a:	4628      	mov	r0, r5
 8000e8c:	f7ff faae 	bl	80003ec <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin 
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin 
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 8000e90:	f64f 7708 	movw	r7, #65288	; 0xff08
 8000e94:	9705      	str	r7, [sp, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin 
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e96:	2601      	movs	r6, #1
 8000e98:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e9e:	a905      	add	r1, sp, #20
 8000ea0:	4628      	mov	r0, r5
 8000ea2:	f7ff faa3 	bl	80003ec <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ea6:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea8:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000eac:	a905      	add	r1, sp, #20
 8000eae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb2:	f7ff fa9b 	bl	80003ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 SPI1_MISO_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|SPI1_MISO_Pin;
 8000eb6:	23e0      	movs	r3, #224	; 0xe0
 8000eb8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	f04f 0802 	mov.w	r8, #2
 8000ebe:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ec6:	2305      	movs	r3, #5
 8000ec8:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eca:	a905      	add	r1, sp, #20
 8000ecc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed0:	f7ff fa8c 	bl	80003ec <HAL_GPIO_Init>

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000ed4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ed8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000ee4:	230e      	movs	r3, #14
 8000ee6:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee8:	a905      	add	r1, sp, #20
 8000eea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eee:	f7ff fa7d 	bl	80003ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ef2:	23c0      	movs	r3, #192	; 0xc0
 8000ef4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ef6:	2312      	movs	r3, #18
 8000ef8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000efa:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efc:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000efe:	2304      	movs	r3, #4
 8000f00:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f02:	a905      	add	r1, sp, #20
 8000f04:	4808      	ldr	r0, [pc, #32]	; (8000f28 <MX_GPIO_Init+0x110>)
 8000f06:	f7ff fa71 	bl	80003ec <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin 
 8000f0a:	4622      	mov	r2, r4
 8000f0c:	4639      	mov	r1, r7
 8000f0e:	4628      	mov	r0, r5
 8000f10:	f7ff fb3e 	bl	8000590 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin 
                          |LD6_Pin, GPIO_PIN_RESET);

}
 8000f14:	b00a      	add	sp, #40	; 0x28
 8000f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	10120000 	.word	0x10120000
 8000f24:	48001000 	.word	0x48001000
 8000f28:	48000400 	.word	0x48000400

08000f2c <turnOnLed>:
//   ledNumber   : LED pin to turn on
//   delayAfterTurnOnFlag : if set put a delay after the led is turn on in
//
// RETURNS       :
//   Nothing
void turnOnLed( uint16_t ledNumber, int delayAfterTurnOnFlag ){
 8000f2c:	b538      	push	{r3, r4, r5, lr}
 8000f2e:	4605      	mov	r5, r0
 8000f30:	460c      	mov	r4, r1
	static uint16_t lastLed = 0xffff;	// not set yet so set the value to invalid one

	if( lastLed != 0xffff){
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <turnOnLed+0x38>)
 8000f34:	8819      	ldrh	r1, [r3, #0]
 8000f36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f3a:	4299      	cmp	r1, r3
 8000f3c:	d003      	beq.n	8000f46 <turnOnLed+0x1a>
		// clear the last LED if needed
		HAL_GPIO_WritePin(GPIOE, lastLed, GPIO_PIN_RESET );
 8000f3e:	2200      	movs	r2, #0
 8000f40:	4809      	ldr	r0, [pc, #36]	; (8000f68 <turnOnLed+0x3c>)
 8000f42:	f7ff fb25 	bl	8000590 <HAL_GPIO_WritePin>
	}

	// keep track of last led that we turned on so we can turn it off next time
	lastLed = ledNumber;
 8000f46:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <turnOnLed+0x38>)
 8000f48:	801d      	strh	r5, [r3, #0]

	if( delayAfterTurnOnFlag == PUT_A_DELAY_AFTER_TURN_ON )
 8000f4a:	2c01      	cmp	r4, #1
 8000f4c:	d103      	bne.n	8000f56 <turnOnLed+0x2a>
		HAL_Delay( 500 );
 8000f4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f52:	f7ff f9cd 	bl	80002f0 <HAL_Delay>

	// turn on the LED pin on GPIO
	HAL_GPIO_WritePin(GPIOE, lastLed, GPIO_PIN_SET );
 8000f56:	2201      	movs	r2, #1
 8000f58:	4b02      	ldr	r3, [pc, #8]	; (8000f64 <turnOnLed+0x38>)
 8000f5a:	8819      	ldrh	r1, [r3, #0]
 8000f5c:	4802      	ldr	r0, [pc, #8]	; (8000f68 <turnOnLed+0x3c>)
 8000f5e:	f7ff fb17 	bl	8000590 <HAL_GPIO_WritePin>
 8000f62:	bd38      	pop	{r3, r4, r5, pc}
 8000f64:	20000008 	.word	0x20000008
 8000f68:	48001000 	.word	0x48001000

08000f6c <checkPushButtonDebounced>:
//   This function will return the state of the push button on the STM debounced
// PARAMETERS    :
//   None
// RETURNS       :
//   0 if not pushed else non zero
int checkPushButtonDebounced( void ){
 8000f6c:	b510      	push	{r4, lr}
	int buttonState = BUTTON_NOT_PRESSED;

	// get the initial button state
	if( HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin ) != 0 )
 8000f6e:	2101      	movs	r1, #1
 8000f70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f74:	f7ff fb04 	bl	8000580 <HAL_GPIO_ReadPin>
 8000f78:	b908      	cbnz	r0, 8000f7e <checkPushButtonDebounced+0x12>
// PARAMETERS    :
//   None
// RETURNS       :
//   0 if not pushed else non zero
int checkPushButtonDebounced( void ){
	int buttonState = BUTTON_NOT_PRESSED;
 8000f7a:	2400      	movs	r4, #0
 8000f7c:	e000      	b.n	8000f80 <checkPushButtonDebounced+0x14>

	// get the initial button state
	if( HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin ) != 0 )
		buttonState = BUTTON_PRESSED;
 8000f7e:	2401      	movs	r4, #1

	HAL_Delay( DEBOUNCE_DELAY );			// small delay to bypass bounce on push button
 8000f80:	2002      	movs	r0, #2
 8000f82:	f7ff f9b5 	bl	80002f0 <HAL_Delay>

	// check if the button state does not agree with first sample
	// if it does not agree ignore it
	if( buttonState == BUTTON_PRESSED ){
 8000f86:	b134      	cbz	r4, 8000f96 <checkPushButtonDebounced+0x2a>
		if( HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin ) == 0 )
 8000f88:	2101      	movs	r1, #1
 8000f8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f8e:	f7ff faf7 	bl	8000580 <HAL_GPIO_ReadPin>
 8000f92:	b138      	cbz	r0, 8000fa4 <checkPushButtonDebounced+0x38>
 8000f94:	e009      	b.n	8000faa <checkPushButtonDebounced+0x3e>
			buttonState = BUTTON_NOT_PRESSED;
	}
	else {
		if( HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin ) != 0 )
 8000f96:	2101      	movs	r1, #1
 8000f98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f9c:	f7ff faf0 	bl	8000580 <HAL_GPIO_ReadPin>
 8000fa0:	b910      	cbnz	r0, 8000fa8 <checkPushButtonDebounced+0x3c>
 8000fa2:	e002      	b.n	8000faa <checkPushButtonDebounced+0x3e>

	// check if the button state does not agree with first sample
	// if it does not agree ignore it
	if( buttonState == BUTTON_PRESSED ){
		if( HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin ) == 0 )
			buttonState = BUTTON_NOT_PRESSED;
 8000fa4:	2400      	movs	r4, #0
 8000fa6:	e000      	b.n	8000faa <checkPushButtonDebounced+0x3e>
	}
	else {
		if( HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin ) != 0 )
			buttonState = BUTTON_PRESSED;
 8000fa8:	2401      	movs	r4, #1
	}

	return buttonState;
}
 8000faa:	4620      	mov	r0, r4
 8000fac:	bd10      	pop	{r4, pc}
 8000fae:	bf00      	nop

08000fb0 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8000fb0:	e7fe      	b.n	8000fb0 <Error_Handler>
 8000fb2:	bf00      	nop

08000fb4 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000fb4:	b500      	push	{lr}
 8000fb6:	b091      	sub	sp, #68	; 0x44

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fc0:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fca:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fcc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000fd0:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd2:	a806      	add	r0, sp, #24
 8000fd4:	f7ff fae2 	bl	800059c <HAL_RCC_OscConfig>
 8000fd8:	b108      	cbz	r0, 8000fde <SystemClock_Config+0x2a>
  {
    Error_Handler();
 8000fda:	f7ff ffe9 	bl	8000fb0 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fde:	230f      	movs	r3, #15
 8000fe0:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe2:	2102      	movs	r1, #2
 8000fe4:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fee:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff0:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ff2:	a801      	add	r0, sp, #4
 8000ff4:	f7ff fe18 	bl	8000c28 <HAL_RCC_ClockConfig>
 8000ff8:	b108      	cbz	r0, 8000ffe <SystemClock_Config+0x4a>
  {
    Error_Handler();
 8000ffa:	f7ff ffd9 	bl	8000fb0 <Error_Handler>
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000ffe:	f7ff ff05 	bl	8000e0c <HAL_RCC_GetHCLKFreq>
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <SystemClock_Config+0x74>)
 8001004:	fba3 3000 	umull	r3, r0, r3, r0
 8001008:	0980      	lsrs	r0, r0, #6
 800100a:	f7ff f9c3 	bl	8000394 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800100e:	2004      	movs	r0, #4
 8001010:	f7ff f9d6 	bl	80003c0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001014:	2200      	movs	r2, #0
 8001016:	4611      	mov	r1, r2
 8001018:	f04f 30ff 	mov.w	r0, #4294967295
 800101c:	f7ff f988 	bl	8000330 <HAL_NVIC_SetPriority>
}
 8001020:	b011      	add	sp, #68	; 0x44
 8001022:	f85d fb04 	ldr.w	pc, [sp], #4
 8001026:	bf00      	nop
 8001028:	10624dd3 	.word	0x10624dd3

0800102c <main>:
}

/* USER CODE END 0 */

int main(void)
{
 800102c:	b510      	push	{r4, lr}
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800102e:	f7ff f93f 	bl	80002b0 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8001032:	f7ff ffbf 	bl	8000fb4 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001036:	f7ff feef 	bl	8000e18 <MX_GPIO_Init>
	  static int 		stateMachine = WAITING_FOR_PUSHBUTTON_PRESS_STATE;

	  /* USER CODE END WHILE */

	  /* USER CODE BEGIN 3 */
	  HAL_Delay( delayTime );
 800103a:	4b29      	ldr	r3, [pc, #164]	; (80010e0 <main+0xb4>)
 800103c:	6818      	ldr	r0, [r3, #0]
 800103e:	f7ff f957 	bl	80002f0 <HAL_Delay>
	  turnOnLed( ledPattern[ledIndex++], DO_NOT_PUT_A_DELAY_AFTER_TURN_ON);	// turn on the LED (and turn off the old one)
 8001042:	4c28      	ldr	r4, [pc, #160]	; (80010e4 <main+0xb8>)
 8001044:	6823      	ldr	r3, [r4, #0]
 8001046:	1c5a      	adds	r2, r3, #1
 8001048:	6022      	str	r2, [r4, #0]
 800104a:	2100      	movs	r1, #0
 800104c:	4a26      	ldr	r2, [pc, #152]	; (80010e8 <main+0xbc>)
 800104e:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8001052:	f7ff ff6b 	bl	8000f2c <turnOnLed>
	  if( ledIndex >= LED_PATTERN_SIZE)					// is the pattern ready to repeat
 8001056:	6823      	ldr	r3, [r4, #0]
 8001058:	2b07      	cmp	r3, #7
 800105a:	dd01      	ble.n	8001060 <main+0x34>
		  ledIndex = 0;
 800105c:	2200      	movs	r2, #0
 800105e:	6022      	str	r2, [r4, #0]

	  switch( stateMachine ){
 8001060:	4b22      	ldr	r3, [pc, #136]	; (80010ec <main+0xc0>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	b113      	cbz	r3, 800106c <main+0x40>
 8001066:	2b01      	cmp	r3, #1
 8001068:	d008      	beq.n	800107c <main+0x50>
 800106a:	e012      	b.n	8001092 <main+0x66>
	  case WAITING_FOR_PUSHBUTTON_PRESS_STATE :
		  if( checkPushButtonDebounced() != BUTTON_NOT_PRESSED )
 800106c:	f7ff ff7e 	bl	8000f6c <checkPushButtonDebounced>
 8001070:	2800      	cmp	r0, #0
 8001072:	d0e2      	beq.n	800103a <main+0xe>
			  stateMachine = WAITING_FOR_PUSHBUTTON_RELEASE_STATE;
 8001074:	2201      	movs	r2, #1
 8001076:	4b1d      	ldr	r3, [pc, #116]	; (80010ec <main+0xc0>)
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	e7de      	b.n	800103a <main+0xe>
		  break;
	  case WAITING_FOR_PUSHBUTTON_RELEASE_STATE:
		  delayTime = BUTTON_PRESSED_LED_DELAY;
 800107c:	2232      	movs	r2, #50	; 0x32
 800107e:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <main+0xb4>)
 8001080:	601a      	str	r2, [r3, #0]
		  if( checkPushButtonDebounced() == BUTTON_NOT_PRESSED ){
 8001082:	f7ff ff73 	bl	8000f6c <checkPushButtonDebounced>
 8001086:	2800      	cmp	r0, #0
 8001088:	d1d7      	bne.n	800103a <main+0xe>
			  stateMachine = WAITING_FOR_LED_PATTERN_COMPLETE_STATE;
 800108a:	2202      	movs	r2, #2
 800108c:	4b17      	ldr	r3, [pc, #92]	; (80010ec <main+0xc0>)
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	e7d3      	b.n	800103a <main+0xe>
		  }
		  break;
	  case WAITING_FOR_LED_PATTERN_COMPLETE_STATE:
	  default:
		  delayTime += SLOW_DOWN_CONSTANT;
 8001092:	4a13      	ldr	r2, [pc, #76]	; (80010e0 <main+0xb4>)
 8001094:	6813      	ldr	r3, [r2, #0]
 8001096:	3396      	adds	r3, #150	; 0x96
 8001098:	6013      	str	r3, [r2, #0]
		  if( delayTime > STOP_SPINNING_VALUE ){
 800109a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800109e:	d9cc      	bls.n	800103a <main+0xe>
			  ledIndex--;
 80010a0:	4a10      	ldr	r2, [pc, #64]	; (80010e4 <main+0xb8>)
 80010a2:	6813      	ldr	r3, [r2, #0]
 80010a4:	3b01      	subs	r3, #1
 80010a6:	6013      	str	r3, [r2, #0]
			  for(int i = 0; i < NUMBER_OF_FLASHES_WHEN_DONE; i++){
 80010a8:	2400      	movs	r4, #0
 80010aa:	e00c      	b.n	80010c6 <main+0x9a>
				  HAL_Delay( DONE_BLINK_RATE_DELAY );
 80010ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010b0:	f7ff f91e 	bl	80002f0 <HAL_Delay>
				  turnOnLed( ledPattern[ledIndex], PUT_A_DELAY_AFTER_TURN_ON );
 80010b4:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <main+0xb8>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	2101      	movs	r1, #1
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <main+0xbc>)
 80010bc:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80010c0:	f7ff ff34 	bl	8000f2c <turnOnLed>
	  case WAITING_FOR_LED_PATTERN_COMPLETE_STATE:
	  default:
		  delayTime += SLOW_DOWN_CONSTANT;
		  if( delayTime > STOP_SPINNING_VALUE ){
			  ledIndex--;
			  for(int i = 0; i < NUMBER_OF_FLASHES_WHEN_DONE; i++){
 80010c4:	3401      	adds	r4, #1
 80010c6:	2c03      	cmp	r4, #3
 80010c8:	ddf0      	ble.n	80010ac <main+0x80>
				  HAL_Delay( DONE_BLINK_RATE_DELAY );
				  turnOnLed( ledPattern[ledIndex], PUT_A_DELAY_AFTER_TURN_ON );
			  }
			  delayTime = INITIAL_LED_DELAY;
 80010ca:	22c8      	movs	r2, #200	; 0xc8
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <main+0xb4>)
 80010ce:	601a      	str	r2, [r3, #0]
			  stateMachine = WAITING_FOR_PUSHBUTTON_PRESS_STATE;
 80010d0:	2200      	movs	r2, #0
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <main+0xc0>)
 80010d4:	601a      	str	r2, [r3, #0]
			  HAL_Delay( WAIT_FOR_NEXT_ROUND_DELAY );
 80010d6:	f241 3088 	movw	r0, #5000	; 0x1388
 80010da:	f7ff f909 	bl	80002f0 <HAL_Delay>
 80010de:	e7ac      	b.n	800103a <main+0xe>
 80010e0:	20000004 	.word	0x20000004
 80010e4:	20000028 	.word	0x20000028
 80010e8:	0800120c 	.word	0x0800120c
 80010ec:	2000002c 	.word	0x2000002c

080010f0 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f0:	b500      	push	{lr}
 80010f2:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f4:	4b1c      	ldr	r3, [pc, #112]	; (8001168 <HAL_MspInit+0x78>)
 80010f6:	699a      	ldr	r2, [r3, #24]
 80010f8:	f042 0201 	orr.w	r2, r2, #1
 80010fc:	619a      	str	r2, [r3, #24]
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	9301      	str	r3, [sp, #4]
 8001106:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001108:	2007      	movs	r0, #7
 800110a:	f7ff f8ff 	bl	800030c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	4611      	mov	r1, r2
 8001112:	f06f 000b 	mvn.w	r0, #11
 8001116:	f7ff f90b 	bl	8000330 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800111a:	2200      	movs	r2, #0
 800111c:	4611      	mov	r1, r2
 800111e:	f06f 000a 	mvn.w	r0, #10
 8001122:	f7ff f905 	bl	8000330 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	4611      	mov	r1, r2
 800112a:	f06f 0009 	mvn.w	r0, #9
 800112e:	f7ff f8ff 	bl	8000330 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	4611      	mov	r1, r2
 8001136:	f06f 0004 	mvn.w	r0, #4
 800113a:	f7ff f8f9 	bl	8000330 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800113e:	2200      	movs	r2, #0
 8001140:	4611      	mov	r1, r2
 8001142:	f06f 0003 	mvn.w	r0, #3
 8001146:	f7ff f8f3 	bl	8000330 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	4611      	mov	r1, r2
 800114e:	f06f 0001 	mvn.w	r0, #1
 8001152:	f7ff f8ed 	bl	8000330 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	4611      	mov	r1, r2
 800115a:	f04f 30ff 	mov.w	r0, #4294967295
 800115e:	f7ff f8e7 	bl	8000330 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001162:	b003      	add	sp, #12
 8001164:	f85d fb04 	ldr.w	pc, [sp], #4
 8001168:	40021000 	.word	0x40021000

0800116c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800116c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800116e:	f7ff f8b1 	bl	80002d4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001172:	f7ff f937 	bl	80003e4 <HAL_SYSTICK_IRQHandler>
 8001176:	bd08      	pop	{r3, pc}

08001178 <__libc_init_array>:
 8001178:	b570      	push	{r4, r5, r6, lr}
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <__libc_init_array+0x3c>)
 800117c:	4c0e      	ldr	r4, [pc, #56]	; (80011b8 <__libc_init_array+0x40>)
 800117e:	1ae4      	subs	r4, r4, r3
 8001180:	10a4      	asrs	r4, r4, #2
 8001182:	2500      	movs	r5, #0
 8001184:	461e      	mov	r6, r3
 8001186:	42a5      	cmp	r5, r4
 8001188:	d004      	beq.n	8001194 <__libc_init_array+0x1c>
 800118a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800118e:	4798      	blx	r3
 8001190:	3501      	adds	r5, #1
 8001192:	e7f8      	b.n	8001186 <__libc_init_array+0xe>
 8001194:	f000 f816 	bl	80011c4 <_init>
 8001198:	4c08      	ldr	r4, [pc, #32]	; (80011bc <__libc_init_array+0x44>)
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <__libc_init_array+0x48>)
 800119c:	1ae4      	subs	r4, r4, r3
 800119e:	10a4      	asrs	r4, r4, #2
 80011a0:	2500      	movs	r5, #0
 80011a2:	461e      	mov	r6, r3
 80011a4:	42a5      	cmp	r5, r4
 80011a6:	d004      	beq.n	80011b2 <__libc_init_array+0x3a>
 80011a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011ac:	4798      	blx	r3
 80011ae:	3501      	adds	r5, #1
 80011b0:	e7f8      	b.n	80011a4 <__libc_init_array+0x2c>
 80011b2:	bd70      	pop	{r4, r5, r6, pc}
 80011b4:	0800121c 	.word	0x0800121c
 80011b8:	0800121c 	.word	0x0800121c
 80011bc:	08001220 	.word	0x08001220
 80011c0:	0800121c 	.word	0x0800121c

080011c4 <_init>:
 80011c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011c6:	bf00      	nop
 80011c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011ca:	bc08      	pop	{r3}
 80011cc:	469e      	mov	lr, r3
 80011ce:	4770      	bx	lr

080011d0 <_fini>:
 80011d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011d2:	bf00      	nop
 80011d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011d6:	bc08      	pop	{r3}
 80011d8:	469e      	mov	lr, r3
 80011da:	4770      	bx	lr
